//Security//

Security is one of the pillars of the AWS Well Architected framework. It is the ability to protect systems, assets, and information, as well as identify ways to mitigate risk, so that business value can be delivered. 

//Design Principles//

Strong Identity Foundation:
	Principle of least privilege.
	Enforce separation of duties for each interaction with AWS resources.
	Centralise privilege management.
	Reduce use of long-term credentials.
Enable Traceability:
	Monitor, audit, and alert the actions and changes in the environment in real time.
	Integrate logs and metrics with systems to automate responses.
Security at all Layers:
	Don't focus on protecting only one layer (e.g. outer layer).
	Defence-in-depth, applied to all layers (edge network, VPC, load balancer, instance, OS, application).
Automate Best Practices:
	Automated mechanism respond faster, with less errors, and can be scaled better than human intervention.
	Design security controls and secure architecture as code, stored in version control.
Protect Data in Transit and at Rest:
	Classify data into sensitivity levels.
	Use encryption, tokenisation, and access control as needed.
Keep People Away From Data:
	Develop tools that eliminate the need to directly access or process data.
	Reduced risk of loss or modification.
Prepare for Security Events:
	Maintain an incident management process.
	Run regular simulations.
	Develop automated tools for detection, investigation, and recovery.


//Identity and Access Management//

Identity and access management is a cornerstone of security, ensuring that only authorised users are able to access resources, services, and data. Define users, groups, services, and roles in the account and build out policies that align with these. Implement strong credential management.

Protecting AWS Credentials:
	Initial AWS account identity (root) has access to all AWS services and resources in that account.
	The root identity should establish less-privileged users and role-based access.
	Root should not be used for everyday tasks, and should be carefully protected (MFA, no access keys etc.).
	IAM users and groups should be created for long-term identity management.
	Can also use federated login and tie back to an organisation's OAUTH.
	Set a password requirement for minimum length and complexity, as well as rotation.
	Access keys can be generated to allow CLI access. These should be carefully guarded and rotated.
	EC2 and STS can be assigned roles, which hosted software can use to assume roles for authentication.

