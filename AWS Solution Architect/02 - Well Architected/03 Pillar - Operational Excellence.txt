//Operational Excellence//

Operational Excellence is one of the Well Architected Framework pillars.

It includes the ability to run system, gain operations insight, deliver business value, and improve supporting processes and procedures.

Operations teams understand the business and customer needs and create metric to measure fulfilment of requirements. They create procedures to respond to operational events. Operational Excellence evolves as business needs change.


//Design principles//

Perform Operations as Code:
	Define the entire workload (apps, infra, etc.) as code, and run updates with code.
	Script operations procedures to run based on triggers and responses to events.
	Eliminate human error and enable consistency.
Annotated Documentation:
	Use cloud features to automatically generate annotated documentation.
	This documentation can be used as an input to other code and scripts.
Make Frequent, Small, Reversible Changes:
	Design workloads so that the components can be regularly updated.
	Make small changes that can be easily reversed.
Refine Operations Procedures Frequently:
	As the workload evolves, evolve the procedures.
	Simulate procedures regularly.
Anticipate Failure:
	Perform early exercises to test failure protocols.
Learn From All Operational Failures:
	Incorporate all lessons learned from operational events and failures.


//Core Elements - Prepare//

Operational teams must understand the workloads and their expected behaviour. Workloads and components must be designed to provide information on their status and performance.

To properly prepare, three elements must be considered:
Operational priorities
	Teams need to understand the entire workload, their role in it, and how they relate to business goals.
	This allows them to prioritise.
	These priorities shape focus on operations improvement.
	Include compliance requirements in prioritisation.
	AWS Cloud Compliance can educate teams on available controls for maintaining compliance.
	AWS Trusted Advisor yields a set of core best practice checks.
	A Well-Architected Review will measure architectures against AWS best practice.
Design for Operations
	Workload design should include how it will be deployed, updated, and operated.
	Use VCS and a CI/CD pipeline. This can be done with AWS Developer Tools (AWS CodeCommit, AWS CodeBuild, AWS CodePipeline, AWS CodeDeploy, and AWS CodeStar).
	Can use AWS CloudFormation to create version-controlled templates for cloud infrastructure.
	Can use AWS CloudFormation and AWS Developer Tools to share design standards.
	Use metadata tags to identify resources for operations activities (e.g. resource owner, lifecycle stage, env etc.). This will assist with organisation, cost attributing, access controls, and running automation.
	Include observation with logging, instrumentation, and business & technical metrics. Need to know internal state of the system.
	Can capture logs in Amazon CloudWatch, from AWS CloudTrail, AWS Lambda, and Amazon VPC Flow Logs. Can also inject logs from the application directly into Amazon CloudWatch using CloudWatch Event and the CloudWatch Logs API. For system-level logs, use CloudWatch Logs agent and AWS CLI.
	Use these logs to create a system-wide view of the operational status, including dashboards (e.g. CloudWatch Dashboards).
	Publish technical and business metrics - these will assist in understanding consumer behaviour.
	AWS X-Ray can trace the execution of distributed applications, giving an end-to-end view of a request as it flows through the application.
	When designing instrumentation, capture a broad set of information including changes in state, user activity, privilege access, and utilisation counters. Can filter for the most useful information later, per event.
Operational Readiness
	Need a consistent process (including checklists) to know when you are ready to go live with a workload.
	Need to have runbooks prepared that document routine activities, and playbooks to guide issue resolution.
	Automate these runbook / playbook activities to reduce human error. Use resource tags to selectively execute. Automated scripts can also respond to triggers and events. Can do this using AWS Systems Manager (Run Command), Systems Manager Automation, and AWS Lambda.
	Automate workload configuration testing by creating a baseline in AWS Config, and checking that configurations adhere to those rules.
	Use simulations and trial days to test procedures. Can create temporary envs to do this.
	When making changes to workload evaluation rules, have a plan for the system that no longer comply.

//Core Elements - Operate//
//Core Elements - Evolve//
